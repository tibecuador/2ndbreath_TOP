to create flex container set 
display: flex;

flex item flex: 1;

flex is actually a shorthand for flex-grow, flex-shrink and flex-basis.

flex: 1 equates to: flex-grow: 1, flex-shrink: 1, flex-basis: 0

 the orientation of items within a flex container can be controlled using the flex-direction property

 The default direction for a flex container is horizontal, or row, but you can change the direction to vertical, or column

 flex-direction: column;

 In most circumstances, flex-direction: row puts the main axis horizontal
 (left-to-right), and column puts the main axis vertical (top-to-bottom).

side note!
  flex-basis to 0, which means that all flex-growing and flex-shrinking would begin their calculations from 0.
  Empty divs by default have 0 height, so for our flex items to fill up the height of their container, 
  they don’t actually need to have any height at all.

  justify-content aligns items across the main axis.

  To change the placement of items along the cross axis use align-items

  One very useful feature of flex is the gap property. Setting gap on a flex container simply adds a
  specified space between flex items, similar to adding a margin to the items themselves. gap is a
  new property so it doesn’t show up in many resources yet, but it works reliably in all modern browser
  s, so it is safe to use and very handy!
  Adding gap: 8px to the centered example above produces the result below.

  The frogs need to get in the same order as their lilypads using flex-direction.
  This CSS property defines the direction items are placed in the container, and accepts the following values:
row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top

justify-content property, which aligns items horizontally and accepts the following values:
flex-start: Items align to the left side of the container.
flex-end: Items align to the right side of the container.
center: Items align at the center of the container.
space-between: Items display with equal spacing between them.
space-around: Items display with equal spacing around them.

align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:
flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.

flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:
row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top

Sometimes reversing the row or column order of a container is not enough.
In these cases, we can apply the order property to individual items.
By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).
Use the order property to reorder the frogs according to their lilypads.

Another property you can apply to individual items is align-self.
This property accepts the same values as align-items and its value for the specific item.

 Spread them out using the flex-wrap property, which accepts the following values:
nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.

he two properties flex-direction and flex-wrap are used so often together
that the shorthand property flex-flow was created to combine them. 
This shorthand property accepts the value of the two properties separated by a space.
For example, you can use flex-flow: row wrap to set rows and wrap them.
